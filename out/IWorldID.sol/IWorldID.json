{"abi":[{"type":"function","name":"verifyProof","inputs":[{"name":"root","type":"uint256","internalType":"uint256"},{"name":"signalHash","type":"uint256","internalType":"uint256"},{"name":"nullifierHash","type":"uint256","internalType":"uint256"},{"name":"externalNullifierHash","type":"uint256","internalType":"uint256"},{"name":"proof","type":"uint256[8]","internalType":"uint256[8]"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"verifyProof(uint256,uint256,uint256,uint256,uint256[8])":"354ca120"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signalHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"externalNullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"verifyProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Worldcoin\",\"custom:usage\":\"IWorldID(worldIDIdentityMangerAddress).verifyProof(root, signalHash, nullifierHash, externalNullifierHash, proof);\",\"kind\":\"dev\",\"methods\":{\"verifyProof(uint256,uint256,uint256,uint256,uint256[8])\":{\"custom:reverts\":\"string If the `proof` is invalid.\",\"details\":\"Note that a double-signaling check is not included here, and should be carried by the      caller.It is highly recommended that the implementation is restricted to `view` if possible.\",\"params\":{\"externalNullifierHash\":\"A keccak256 hash of the external nullifier\",\"nullifierHash\":\"The nullifier hash\",\"proof\":\"The zero-knowledge proof\",\"root\":\"The of the Merkle tree\",\"signalHash\":\"A keccak256 hash of the Semaphore signal\"}}},\"title\":\"WorldID Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"verifyProof(uint256,uint256,uint256,uint256,uint256[8])\":{\"notice\":\"Verifies a WorldID zero knowledge proof.\"}},\"notice\":\"The interface to the Semaphore Groth16 proof verification for WorldID.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IWorldID.sol\":\"IWorldID\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/\",\":@eth-optimism/contracts/=node_modules/@eth-optimism/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/test/=lib/prb-test/src/\",\":@rari-capital/solmate/=lib/solmate/\",\":@scroll-tech/contracts/=node_modules/@scroll-tech/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":fx-portal/contracts/=lib/contracts/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":prb-test/=lib/prb-test/src/\",\":solmate/=lib/solmate/\",\":src/=src/\"]},\"sources\":{\"src/interfaces/IWorldID.sol\":{\"keccak256\":\"0x8e480116b6e51b7c9920e2e452f40a940f693b3318f6d6625c590ac87c2d9e02\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eb203172fcf0b5b2a35fe2dd8cf62af220f0aabcb05ed306c7eaa3836edd6ee6\",\"dweb:/ipfs/QmZ6Z5wJHzWdCtLoNxNWFzKsb5WnT53mjamfziN1VhJbYv\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.16+commit.07a7930e"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"root","type":"uint256"},{"internalType":"uint256","name":"signalHash","type":"uint256"},{"internalType":"uint256","name":"nullifierHash","type":"uint256"},{"internalType":"uint256","name":"externalNullifierHash","type":"uint256"},{"internalType":"uint256[8]","name":"proof","type":"uint256[8]"}],"stateMutability":"nonpayable","type":"function","name":"verifyProof"}],"devdoc":{"kind":"dev","methods":{"verifyProof(uint256,uint256,uint256,uint256,uint256[8])":{"custom:reverts":"string If the `proof` is invalid.","details":"Note that a double-signaling check is not included here, and should be carried by the      caller.It is highly recommended that the implementation is restricted to `view` if possible.","params":{"externalNullifierHash":"A keccak256 hash of the external nullifier","nullifierHash":"The nullifier hash","proof":"The zero-knowledge proof","root":"The of the Merkle tree","signalHash":"A keccak256 hash of the Semaphore signal"}}},"version":1},"userdoc":{"kind":"user","methods":{"verifyProof(uint256,uint256,uint256,uint256,uint256[8])":{"notice":"Verifies a WorldID zero knowledge proof."}},"version":1}},"settings":{"remappings":["@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/","@eth-optimism/contracts/=node_modules/@eth-optimism/contracts/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@prb/test/=lib/prb-test/src/","@rari-capital/solmate/=lib/solmate/","@scroll-tech/contracts/=node_modules/@scroll-tech/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","fx-portal/contracts/=lib/contracts/contracts/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/","prb-test/=lib/prb-test/src/","solmate/=lib/solmate/","src/=src/"],"optimizer":{"enabled":true,"runs":10000},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/interfaces/IWorldID.sol":"IWorldID"},"evmVersion":"london","libraries":{}},"sources":{"src/interfaces/IWorldID.sol":{"keccak256":"0x8e480116b6e51b7c9920e2e452f40a940f693b3318f6d6625c590ac87c2d9e02","urls":["bzz-raw://eb203172fcf0b5b2a35fe2dd8cf62af220f0aabcb05ed306c7eaa3836edd6ee6","dweb:/ipfs/QmZ6Z5wJHzWdCtLoNxNWFzKsb5WnT53mjamfziN1VhJbYv"],"license":"MIT"}},"version":1},"id":31}