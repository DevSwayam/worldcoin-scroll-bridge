{"abi":[{"type":"function","name":"getTreeDepth","inputs":[],"outputs":[{"name":"","type":"uint8","internalType":"uint8"}],"stateMutability":"view"},{"type":"function","name":"latestRoot","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"rootHistory","inputs":[{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint128","internalType":"uint128"}],"stateMutability":"view"},{"type":"function","name":"rootHistoryExpiry","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"setRootHistoryExpiry","inputs":[{"name":"expiryTime","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"verifyProof","inputs":[{"name":"root","type":"uint256","internalType":"uint256"},{"name":"signalHash","type":"uint256","internalType":"uint256"},{"name":"nullifierHash","type":"uint256","internalType":"uint256"},{"name":"externalNullifierHash","type":"uint256","internalType":"uint256"},{"name":"proof","type":"uint256[8]","internalType":"uint256[8]"}],"outputs":[],"stateMutability":"view"},{"type":"event","name":"RootAdded","inputs":[{"name":"root","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"timestamp","type":"uint128","indexed":false,"internalType":"uint128"}],"anonymous":false},{"type":"event","name":"RootHistoryExpirySet","inputs":[{"name":"newExpiry","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"CannotOverwriteRoot","inputs":[]},{"type":"error","name":"ExpiredRoot","inputs":[]},{"type":"error","name":"NoRootsSeen","inputs":[]},{"type":"error","name":"NonExistentRoot","inputs":[]},{"type":"error","name":"UnsupportedTreeDepth","inputs":[{"name":"depth","type":"uint8","internalType":"uint8"}]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getTreeDepth()":"8e5cdd50","latestRoot()":"d7b0fef1","rootHistory(uint256)":"f1c621ee","rootHistoryExpiry()":"b0d69079","setRootHistoryExpiry(uint256)":"c70aa727","verifyProof(uint256,uint256,uint256,uint256,uint256[8])":"354ca120"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CannotOverwriteRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpiredRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRootsSeen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentRoot\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"}],\"name\":\"UnsupportedTreeDepth\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"timestamp\",\"type\":\"uint128\"}],\"name\":\"RootAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExpiry\",\"type\":\"uint256\"}],\"name\":\"RootHistoryExpirySet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getTreeDepth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rootHistory\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootHistoryExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"name\":\"setRootHistoryExpiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signalHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"externalNullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"verifyProof\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Worldcoin\",\"details\":\"This contract abstracts the common functionality, allowing for easier understanding and      code reuse.This contract is very explicitly not able to be instantiated. Do not un-mark it as      `abstract`.\",\"errors\":{\"UnsupportedTreeDepth(uint8)\":[{\"params\":{\"depth\":\"The tree depth that was passed.\"}}]},\"events\":{\"RootAdded(uint256,uint128)\":{\"params\":{\"root\":\"The value of the root that was added.\",\"timestamp\":\"The timestamp of insertion for the given root.\"}},\"RootHistoryExpirySet(uint256)\":{\"params\":{\"newExpiry\":\"The new expiry time.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_treeDepth\":\"The depth of the identities merkle tree.\"}},\"latestRoot()\":{\"custom:reverts\":\"NoRootsSeen If there is no latest root.\"},\"setRootHistoryExpiry(uint256)\":{\"details\":\"When implementing this function, ensure that it is guarded on `onlyOwner`.\",\"params\":{\"expiryTime\":\"The new amount of time it takes for a root to expire.\"}},\"verifyProof(uint256,uint256,uint256,uint256,uint256[8])\":{\"custom:reverts\":\"string If the zero-knowledge proof cannot be verified for the public inputs.\",\"details\":\"Note that a double-signaling check is not included here, and should be carried by the      caller.\",\"params\":{\"externalNullifierHash\":\"A keccak256 hash of the external nullifier\",\"nullifierHash\":\"The nullifier hash\",\"proof\":\"The zero-knowledge proof\",\"root\":\"The root of the Merkle tree\",\"signalHash\":\"A keccak256 hash of the Semaphore signal\"}}},\"title\":\"Bridged World ID\",\"version\":1},\"userdoc\":{\"errors\":{\"CannotOverwriteRoot()\":[{\"notice\":\"Emitted when attempting to update the timestamp for a root that already has one.\"}],\"ExpiredRoot()\":[{\"notice\":\"Emitted when attempting to validate a root that has expired.\"}],\"NoRootsSeen()\":[{\"notice\":\"Emitted if the latest root is requested but the bridge has not seen any roots yet.\"}],\"NonExistentRoot()\":[{\"notice\":\"Emitted when attempting to validate a root that has yet to be added to the root         history.\"}],\"UnsupportedTreeDepth(uint8)\":[{\"notice\":\"Emitted when the provided semaphore tree depth is unsupported.\"}]},\"events\":{\"RootAdded(uint256,uint128)\":{\"notice\":\"Emitted when a new root is received by the contract.\"},\"RootHistoryExpirySet(uint256)\":{\"notice\":\"Emitted when the expiry time for the root history is updated.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs a new instance of the state bridge.\"},\"getTreeDepth()\":{\"notice\":\"Gets the Semaphore tree depth the contract was initialized with.\"},\"latestRoot()\":{\"notice\":\"Gets the value of the latest root.\"},\"rootHistory(uint256)\":{\"notice\":\"The mapping between the value of the merkle tree root and the timestamp at which it         entered the root history.\"},\"rootHistoryExpiry()\":{\"notice\":\"Gets the amount of time it takes for a root in the root history to expire.\"},\"setRootHistoryExpiry(uint256)\":{\"notice\":\"Sets the amount of time it takes for a root in the root history to expire.\"},\"verifyProof(uint256,uint256,uint256,uint256,uint256[8])\":{\"notice\":\"A verifier for the semaphore protocol.\"}},\"notice\":\"A base contract for the WorldID state bridges that exist on other chains. The state         bridges manage the root history of the identity merkle tree on chains other than         mainnet.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/abstract/WorldIDBridge.sol\":\"WorldIDBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/\",\":@eth-optimism/contracts/=node_modules/@eth-optimism/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/test/=lib/prb-test/src/\",\":@rari-capital/solmate/=lib/solmate/\",\":@scroll-tech/contracts/=node_modules/@scroll-tech/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":fx-portal/contracts/=lib/contracts/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":prb-test/=lib/prb-test/src/\",\":solmate/=lib/solmate/\",\":src/=src/\"]},\"sources\":{\"src/SemaphoreVerifier.sol\":{\"keccak256\":\"0xfe9d9568afcaf3beacde57ea8b400f77f783505eaa77986dd9ea74c18fc8cc58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c86f9fd5e48269d983832e5725ecc57b7c73614c0fc372e53e4889fcf822345f\",\"dweb:/ipfs/QmegmxyJsrNP4iq5JkCg2YNvCpBPUHFPNWVsjg3oU9AvMF\"]},\"src/abstract/WorldIDBridge.sol\":{\"keccak256\":\"0xda64973fd8db8a48d1a3a956f749c1147382f20e49031b81693fab759de0559c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3e9a4610c779d89855a987466f77df1f0911a3e9493be1e09540fbd863bcd66d\",\"dweb:/ipfs/QmbVsDpZ8n8uUaBkrzJk8hrbm7sedeTCQKRjV9wM5b2ePC\"]},\"src/interfaces/ISemaphoreVerifier.sol\":{\"keccak256\":\"0x148cc393769ae9101bb83e6a3ad96b9ad4d3cfe3e603251b6b45e393154c4f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6caa4906d0823bf15a438a57acc2b63ef8ba86c411f979d712e75e6d883d585\",\"dweb:/ipfs/QmS6cmSQXYBC8zEyMan8pJDejahAM13sqNz8NfRb1QCmKs\"]},\"src/interfaces/IWorldID.sol\":{\"keccak256\":\"0x8e480116b6e51b7c9920e2e452f40a940f693b3318f6d6625c590ac87c2d9e02\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eb203172fcf0b5b2a35fe2dd8cf62af220f0aabcb05ed306c7eaa3836edd6ee6\",\"dweb:/ipfs/QmZ6Z5wJHzWdCtLoNxNWFzKsb5WnT53mjamfziN1VhJbYv\"]},\"src/utils/SemaphoreTreeDepthValidator.sol\":{\"keccak256\":\"0x383ed25705dadfb674c7bd2f8c4999c6368da1bc63b9f212a9526ed3672e7acb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://93f49cc11cc7a3b6d70aca44a223bfccfe5ccbc513e294076efb0d4b55b0e231\",\"dweb:/ipfs/QmSYASLuaNjFk6zyp436j5Meoa9M6ECnLure286bHKg1Ma\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.16+commit.07a7930e"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"CannotOverwriteRoot"},{"inputs":[],"type":"error","name":"ExpiredRoot"},{"inputs":[],"type":"error","name":"NoRootsSeen"},{"inputs":[],"type":"error","name":"NonExistentRoot"},{"inputs":[{"internalType":"uint8","name":"depth","type":"uint8"}],"type":"error","name":"UnsupportedTreeDepth"},{"inputs":[{"internalType":"uint256","name":"root","type":"uint256","indexed":false},{"internalType":"uint128","name":"timestamp","type":"uint128","indexed":false}],"type":"event","name":"RootAdded","anonymous":false},{"inputs":[{"internalType":"uint256","name":"newExpiry","type":"uint256","indexed":false}],"type":"event","name":"RootHistoryExpirySet","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"getTreeDepth","outputs":[{"internalType":"uint8","name":"","type":"uint8"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"latestRoot","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","name":"rootHistory","outputs":[{"internalType":"uint128","name":"","type":"uint128"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"rootHistoryExpiry","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"expiryTime","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setRootHistoryExpiry"},{"inputs":[{"internalType":"uint256","name":"root","type":"uint256"},{"internalType":"uint256","name":"signalHash","type":"uint256"},{"internalType":"uint256","name":"nullifierHash","type":"uint256"},{"internalType":"uint256","name":"externalNullifierHash","type":"uint256"},{"internalType":"uint256[8]","name":"proof","type":"uint256[8]"}],"stateMutability":"view","type":"function","name":"verifyProof"}],"devdoc":{"kind":"dev","methods":{"constructor":{"params":{"_treeDepth":"The depth of the identities merkle tree."}},"latestRoot()":{"custom:reverts":"NoRootsSeen If there is no latest root."},"setRootHistoryExpiry(uint256)":{"details":"When implementing this function, ensure that it is guarded on `onlyOwner`.","params":{"expiryTime":"The new amount of time it takes for a root to expire."}},"verifyProof(uint256,uint256,uint256,uint256,uint256[8])":{"custom:reverts":"string If the zero-knowledge proof cannot be verified for the public inputs.","details":"Note that a double-signaling check is not included here, and should be carried by the      caller.","params":{"externalNullifierHash":"A keccak256 hash of the external nullifier","nullifierHash":"The nullifier hash","proof":"The zero-knowledge proof","root":"The root of the Merkle tree","signalHash":"A keccak256 hash of the Semaphore signal"}}},"version":1},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"Constructs a new instance of the state bridge."},"getTreeDepth()":{"notice":"Gets the Semaphore tree depth the contract was initialized with."},"latestRoot()":{"notice":"Gets the value of the latest root."},"rootHistory(uint256)":{"notice":"The mapping between the value of the merkle tree root and the timestamp at which it         entered the root history."},"rootHistoryExpiry()":{"notice":"Gets the amount of time it takes for a root in the root history to expire."},"setRootHistoryExpiry(uint256)":{"notice":"Sets the amount of time it takes for a root in the root history to expire."},"verifyProof(uint256,uint256,uint256,uint256,uint256[8])":{"notice":"A verifier for the semaphore protocol."}},"version":1}},"settings":{"remappings":["@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/","@eth-optimism/contracts/=node_modules/@eth-optimism/contracts/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@prb/test/=lib/prb-test/src/","@rari-capital/solmate/=lib/solmate/","@scroll-tech/contracts/=node_modules/@scroll-tech/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","fx-portal/contracts/=lib/contracts/contracts/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/","prb-test/=lib/prb-test/src/","solmate/=lib/solmate/","src/=src/"],"optimizer":{"enabled":true,"runs":10000},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/abstract/WorldIDBridge.sol":"WorldIDBridge"},"evmVersion":"london","libraries":{}},"sources":{"src/SemaphoreVerifier.sol":{"keccak256":"0xfe9d9568afcaf3beacde57ea8b400f77f783505eaa77986dd9ea74c18fc8cc58","urls":["bzz-raw://c86f9fd5e48269d983832e5725ecc57b7c73614c0fc372e53e4889fcf822345f","dweb:/ipfs/QmegmxyJsrNP4iq5JkCg2YNvCpBPUHFPNWVsjg3oU9AvMF"],"license":"MIT"},"src/abstract/WorldIDBridge.sol":{"keccak256":"0xda64973fd8db8a48d1a3a956f749c1147382f20e49031b81693fab759de0559c","urls":["bzz-raw://3e9a4610c779d89855a987466f77df1f0911a3e9493be1e09540fbd863bcd66d","dweb:/ipfs/QmbVsDpZ8n8uUaBkrzJk8hrbm7sedeTCQKRjV9wM5b2ePC"],"license":"MIT"},"src/interfaces/ISemaphoreVerifier.sol":{"keccak256":"0x148cc393769ae9101bb83e6a3ad96b9ad4d3cfe3e603251b6b45e393154c4f49","urls":["bzz-raw://d6caa4906d0823bf15a438a57acc2b63ef8ba86c411f979d712e75e6d883d585","dweb:/ipfs/QmS6cmSQXYBC8zEyMan8pJDejahAM13sqNz8NfRb1QCmKs"],"license":"MIT"},"src/interfaces/IWorldID.sol":{"keccak256":"0x8e480116b6e51b7c9920e2e452f40a940f693b3318f6d6625c590ac87c2d9e02","urls":["bzz-raw://eb203172fcf0b5b2a35fe2dd8cf62af220f0aabcb05ed306c7eaa3836edd6ee6","dweb:/ipfs/QmZ6Z5wJHzWdCtLoNxNWFzKsb5WnT53mjamfziN1VhJbYv"],"license":"MIT"},"src/utils/SemaphoreTreeDepthValidator.sol":{"keccak256":"0x383ed25705dadfb674c7bd2f8c4999c6368da1bc63b9f212a9526ed3672e7acb","urls":["bzz-raw://93f49cc11cc7a3b6d70aca44a223bfccfe5ccbc513e294076efb0d4b55b0e231","dweb:/ipfs/QmSYASLuaNjFk6zyp436j5Meoa9M6ECnLure286bHKg1Ma"],"license":"MIT"}},"version":1},"id":23}