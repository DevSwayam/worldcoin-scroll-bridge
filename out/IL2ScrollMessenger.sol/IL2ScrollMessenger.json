{"abi":[{"type":"function","name":"relayMessage","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"message","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"sendMessage","inputs":[{"name":"target","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"message","type":"bytes","internalType":"bytes"},{"name":"gasLimit","type":"uint256","internalType":"uint256"},{"name":"refundAddress","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"sendMessage","inputs":[{"name":"target","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"message","type":"bytes","internalType":"bytes"},{"name":"gasLimit","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"xDomainMessageSender","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"event","name":"FailedRelayedMessage","inputs":[{"name":"messageHash","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"RelayedMessage","inputs":[{"name":"messageHash","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"SentMessage","inputs":[{"name":"sender","type":"address","indexed":true,"internalType":"address"},{"name":"target","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"messageNonce","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"gasLimit","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"message","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"relayMessage(address,address,uint256,uint256,bytes)":"8ef1332e","sendMessage(address,uint256,bytes,uint256)":"b2267a7b","sendMessage(address,uint256,bytes,uint256,address)":"5f7b1577","xDomainMessageSender()":"6e296e45"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"FailedRelayedMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"RelayedMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"messageNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"SentMessage\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"relayMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xDomainMessageSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"relayMessage(address,address,uint256,uint256,bytes)\":{\"details\":\"Make sure this is only called by privileged accounts.\",\"params\":{\"from\":\"The address of the sender of the message.\",\"message\":\"The content of the message.\",\"nonce\":\"The nonce of the message to avoid replay attack.\",\"to\":\"The address of the recipient of the message.\",\"value\":\"The msg.value passed to the message call.\"}},\"sendMessage(address,uint256,bytes,uint256)\":{\"params\":{\"gasLimit\":\"Gas limit required to complete the message relay on corresponding chain.\",\"message\":\"The content of the message.\",\"target\":\"The address of account who receive the message.\",\"value\":\"The amount of ether passed when call target contract.\"}},\"sendMessage(address,uint256,bytes,uint256,address)\":{\"params\":{\"gasLimit\":\"Gas limit required to complete the message relay on corresponding chain.\",\"message\":\"The content of the message.\",\"refundAddress\":\"The address of account who will receive the refunded fee.\",\"target\":\"The address of account who receive the message.\",\"value\":\"The amount of ether passed when call target contract.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"FailedRelayedMessage(bytes32)\":{\"notice\":\"Emitted when a cross domain message is failed to relay.\"},\"RelayedMessage(bytes32)\":{\"notice\":\"Emitted when a cross domain message is relayed successfully.\"},\"SentMessage(address,address,uint256,uint256,uint256,bytes)\":{\"notice\":\"Emitted when a cross domain message is sent.\"}},\"kind\":\"user\",\"methods\":{\"relayMessage(address,address,uint256,uint256,bytes)\":{\"notice\":\"execute L1 => L2 message\"},\"sendMessage(address,uint256,bytes,uint256)\":{\"notice\":\"Send cross chain message from L1 to L2 or L2 to L1.\"},\"sendMessage(address,uint256,bytes,uint256,address)\":{\"notice\":\"Send cross chain message from L1 to L2 or L2 to L1.\"},\"xDomainMessageSender()\":{\"notice\":\"Return the sender of a cross domain message.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@scroll-tech/contracts/L2/IL2ScrollMessenger.sol\":\"IL2ScrollMessenger\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/\",\":@eth-optimism/contracts/=node_modules/@eth-optimism/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/test/=lib/prb-test/src/\",\":@rari-capital/solmate/=lib/solmate/\",\":@scroll-tech/contracts/=node_modules/@scroll-tech/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":fx-portal/contracts/=lib/contracts/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":prb-test/=lib/prb-test/src/\",\":solmate/=lib/solmate/\",\":src/=src/\"]},\"sources\":{\"node_modules/@scroll-tech/contracts/L2/IL2ScrollMessenger.sol\":{\"keccak256\":\"0xf26de78c06c12c50074f3d8498224ffb12374eb0007954c2893e6fa8704215ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://716a1441871a3a922f4f8da2c06c6bf9e030fb26bd85d609ee777b55031ed51d\",\"dweb:/ipfs/QmQ4ywRhjaFZCnE8Ffhj1artfgEGRCDSdF35uv7PjvnqG5\"]},\"node_modules/@scroll-tech/contracts/libraries/IScrollMessenger.sol\":{\"keccak256\":\"0x5a39de18b5912b62614eba49a0381b84e57bc339d00cc8b5e1da1adab457ee41\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4f7959447ca88e7fba1b1cfe3f0c7c26284a5f750f30f01b9f4ac4001b4861bd\",\"dweb:/ipfs/QmPzByeNMPkzZTFd1GLJHF2diCL1AdTE1LRdfp4nS7zxGX\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.16+commit.07a7930e"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"messageHash","type":"bytes32","indexed":true}],"type":"event","name":"FailedRelayedMessage","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"messageHash","type":"bytes32","indexed":true}],"type":"event","name":"RelayedMessage","anonymous":false},{"inputs":[{"internalType":"address","name":"sender","type":"address","indexed":true},{"internalType":"address","name":"target","type":"address","indexed":true},{"internalType":"uint256","name":"value","type":"uint256","indexed":false},{"internalType":"uint256","name":"messageNonce","type":"uint256","indexed":false},{"internalType":"uint256","name":"gasLimit","type":"uint256","indexed":false},{"internalType":"bytes","name":"message","type":"bytes","indexed":false}],"type":"event","name":"SentMessage","anonymous":false},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"message","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"relayMessage"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"address","name":"refundAddress","type":"address"}],"stateMutability":"payable","type":"function","name":"sendMessage"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"uint256","name":"gasLimit","type":"uint256"}],"stateMutability":"payable","type":"function","name":"sendMessage"},{"inputs":[],"stateMutability":"view","type":"function","name":"xDomainMessageSender","outputs":[{"internalType":"address","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"relayMessage(address,address,uint256,uint256,bytes)":{"details":"Make sure this is only called by privileged accounts.","params":{"from":"The address of the sender of the message.","message":"The content of the message.","nonce":"The nonce of the message to avoid replay attack.","to":"The address of the recipient of the message.","value":"The msg.value passed to the message call."}},"sendMessage(address,uint256,bytes,uint256)":{"params":{"gasLimit":"Gas limit required to complete the message relay on corresponding chain.","message":"The content of the message.","target":"The address of account who receive the message.","value":"The amount of ether passed when call target contract."}},"sendMessage(address,uint256,bytes,uint256,address)":{"params":{"gasLimit":"Gas limit required to complete the message relay on corresponding chain.","message":"The content of the message.","refundAddress":"The address of account who will receive the refunded fee.","target":"The address of account who receive the message.","value":"The amount of ether passed when call target contract."}}},"version":1},"userdoc":{"kind":"user","methods":{"relayMessage(address,address,uint256,uint256,bytes)":{"notice":"execute L1 => L2 message"},"sendMessage(address,uint256,bytes,uint256)":{"notice":"Send cross chain message from L1 to L2 or L2 to L1."},"sendMessage(address,uint256,bytes,uint256,address)":{"notice":"Send cross chain message from L1 to L2 or L2 to L1."},"xDomainMessageSender()":{"notice":"Return the sender of a cross domain message."}},"version":1}},"settings":{"remappings":["@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/","@eth-optimism/contracts/=node_modules/@eth-optimism/contracts/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@prb/test/=lib/prb-test/src/","@rari-capital/solmate/=lib/solmate/","@scroll-tech/contracts/=node_modules/@scroll-tech/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","fx-portal/contracts/=lib/contracts/contracts/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/","prb-test/=lib/prb-test/src/","solmate/=lib/solmate/","src/=src/"],"optimizer":{"enabled":true,"runs":10000},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"node_modules/@scroll-tech/contracts/L2/IL2ScrollMessenger.sol":"IL2ScrollMessenger"},"evmVersion":"london","libraries":{}},"sources":{"node_modules/@scroll-tech/contracts/L2/IL2ScrollMessenger.sol":{"keccak256":"0xf26de78c06c12c50074f3d8498224ffb12374eb0007954c2893e6fa8704215ed","urls":["bzz-raw://716a1441871a3a922f4f8da2c06c6bf9e030fb26bd85d609ee777b55031ed51d","dweb:/ipfs/QmQ4ywRhjaFZCnE8Ffhj1artfgEGRCDSdF35uv7PjvnqG5"],"license":"MIT"},"node_modules/@scroll-tech/contracts/libraries/IScrollMessenger.sol":{"keccak256":"0x5a39de18b5912b62614eba49a0381b84e57bc339d00cc8b5e1da1adab457ee41","urls":["bzz-raw://4f7959447ca88e7fba1b1cfe3f0c7c26284a5f750f30f01b9f4ac4001b4861bd","dweb:/ipfs/QmPzByeNMPkzZTFd1GLJHF2diCL1AdTE1LRdfp4nS7zxGX"],"license":"MIT"}},"version":1},"id":17}