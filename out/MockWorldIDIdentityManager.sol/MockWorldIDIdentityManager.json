{"abi":[{"type":"constructor","inputs":[{"name":"initRoot","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"deleteIdentities","inputs":[{"name":"deletionProof","type":"uint256[8]","internalType":"uint256[8]"},{"name":"packedDeletionIndices","type":"bytes","internalType":"bytes"},{"name":"preRoot","type":"uint256","internalType":"uint256"},{"name":"postRoot","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"insertRoot","inputs":[{"name":"postRoot","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"latestRoot","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"registerIdentities","inputs":[{"name":"insertionProof","type":"uint256[8]","internalType":"uint256[8]"},{"name":"preRoot","type":"uint256","internalType":"uint256"},{"name":"startIndex","type":"uint32","internalType":"uint32"},{"name":"identityCommitments","type":"uint256[]","internalType":"uint256[]"},{"name":"postRoot","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"TreeChanged","inputs":[{"name":"preRoot","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"kind","type":"uint8","indexed":true,"internalType":"enum MockWorldIDIdentityManager.TreeChange"},{"name":"postRoot","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x608060405234801561001057600080fd5b5060405161033c38038061033c83398101604081905261002f91610037565b600055610050565b60006020828403121561004957600080fd5b5051919050565b6102dd8061005f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632217b21114610051578063c46d227a14610066578063d7b0fef114610079578063ea10fbbe1461008e575b600080fd5b61006461005f366004610166565b6100a1565b005b610064610074366004610220565b6100db565b60005460405190815260200160405180910390f35b61006461009c366004610239565b610114565b6000818155819060405187907f25f6d5cc356ee0b49cf708c13c68197947f5740a878a298765e4b18e4afdaf0490600090a4505050505050565b6000805482825590829060405183907f25f6d5cc356ee0b49cf708c13c68197947f5740a878a298765e4b18e4afdaf0490600090a45050565b600081905580600160405184907f25f6d5cc356ee0b49cf708c13c68197947f5740a878a298765e4b18e4afdaf0490600090a45050505050565b80610100810183101561016057600080fd5b92915050565b600080600080600080610180878903121561018057600080fd5b61018a888861014e565b9550610100870135945061012087013563ffffffff811681146101ac57600080fd5b935061014087013567ffffffffffffffff808211156101ca57600080fd5b818901915089601f8301126101de57600080fd5b8135818111156101ed57600080fd5b8a60208260051b850101111561020257600080fd5b60208301955080945050505061016087013590509295509295509295565b60006020828403121561023257600080fd5b5035919050565b6000806000806000610160868803121561025257600080fd5b61025c878761014e565b945061010086013567ffffffffffffffff8082111561027a57600080fd5b818801915088601f83011261028e57600080fd5b81358181111561029d57600080fd5b8960208285010111156102af57600080fd5b9699602092909201985095966101208101359650610140013594509250505056fea164736f6c6343000810000a","sourceMap":"381:4445:36:-:0;;;1071:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1111:11;:22;381:4445;;14:184:54;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;-1:-1:-1;176:16:54;;14:184;-1:-1:-1;14:184:54:o;:::-;381:4445:36;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632217b21114610051578063c46d227a14610066578063d7b0fef114610079578063ea10fbbe1461008e575b600080fd5b61006461005f366004610166565b6100a1565b005b610064610074366004610220565b6100db565b60005460405190815260200160405180910390f35b61006461009c366004610239565b610114565b6000818155819060405187907f25f6d5cc356ee0b49cf708c13c68197947f5740a878a298765e4b18e4afdaf0490600090a4505050505050565b6000805482825590829060405183907f25f6d5cc356ee0b49cf708c13c68197947f5740a878a298765e4b18e4afdaf0490600090a45050565b600081905580600160405184907f25f6d5cc356ee0b49cf708c13c68197947f5740a878a298765e4b18e4afdaf0490600090a45050505050565b80610100810183101561016057600080fd5b92915050565b600080600080600080610180878903121561018057600080fd5b61018a888861014e565b9550610100870135945061012087013563ffffffff811681146101ac57600080fd5b935061014087013567ffffffffffffffff808211156101ca57600080fd5b818901915089601f8301126101de57600080fd5b8135818111156101ed57600080fd5b8a60208260051b850101111561020257600080fd5b60208301955080945050505061016087013590509295509295509295565b60006020828403121561023257600080fd5b5035919050565b6000806000806000610160868803121561025257600080fd5b61025c878761014e565b945061010086013567ffffffffffffffff8082111561027a57600080fd5b818801915088601f83011261028e57600080fd5b81358181111561029d57600080fd5b8960208285010111156102af57600080fd5b9699602092909201985095966101208101359650610140013594509250505056fea164736f6c6343000810000a","sourceMap":"381:4445:36:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2629:317;;;;;;:::i;:::-;;:::i;:::-;;4538:191;;;;;;:::i;:::-;;:::i;4735:89::-;4780:7;4806:11;4735:89;;1562:25:54;;;1550:2;1535:18;4735:89:36;;;;;;;4248:284;;;;;;:::i;:::-;;:::i;2629:317::-;2850:11;:22;;;2864:8;;2887:52;;2899:7;;2887:52;;;;;2629:317;;;;;;:::o;4538:191::-;4593:15;4611:11;;4632:22;;;4611:11;4646:8;;4670:52;;4682:7;;4670:52;;;;;4583:146;4538:191;:::o;4248:284::-;4437:11;:22;;;4451:8;4495:19;4474:51;;4486:7;;4474:51;;;;;4248:284;;;;;:::o;14:160:54:-;108:6;141:3;129:16;;126:25;-1:-1:-1;123:45:54;;;164:1;161;154:12;123:45;14:160;;;;:::o;179:1047::-;325:6;333;341;349;357;365;418:3;406:9;397:7;393:23;389:33;386:53;;;435:1;432;425:12;386:53;458;503:7;492:9;458:53;:::i;:::-;448:63;;558:3;547:9;543:19;530:33;520:43;;613:3;602:9;598:19;585:33;658:10;651:5;647:22;640:5;637:33;627:61;;684:1;681;674:12;627:61;707:5;-1:-1:-1;763:3:54;748:19;;735:33;787:18;817:14;;;814:34;;;844:1;841;834:12;814:34;882:6;871:9;867:22;857:32;;927:7;920:4;916:2;912:13;908:27;898:55;;949:1;946;939:12;898:55;989:2;976:16;1015:2;1007:6;1004:14;1001:34;;;1031:1;1028;1021:12;1001:34;1086:7;1079:4;1069:6;1066:1;1062:14;1058:2;1054:23;1050:34;1047:47;1044:67;;;1107:1;1104;1097:12;1044:67;1138:4;1134:2;1130:13;1120:23;;1162:6;1152:16;;;;;1215:3;1204:9;1200:19;1187:33;1177:43;;179:1047;;;;;;;;:::o;1231:180::-;1290:6;1343:2;1331:9;1322:7;1318:23;1314:32;1311:52;;;1359:1;1356;1349:12;1311:52;-1:-1:-1;1382:23:54;;1231:180;-1:-1:-1;1231:180:54:o;1598:858::-;1720:6;1728;1736;1744;1752;1805:3;1793:9;1784:7;1780:23;1776:33;1773:53;;;1822:1;1819;1812:12;1773:53;1845;1890:7;1879:9;1845:53;:::i;:::-;1835:63;;1949:3;1938:9;1934:19;1921:33;1973:18;2014:2;2006:6;2003:14;2000:34;;;2030:1;2027;2020:12;2000:34;2068:6;2057:9;2053:22;2043:32;;2113:7;2106:4;2102:2;2098:13;2094:27;2084:55;;2135:1;2132;2125:12;2084:55;2175:2;2162:16;2201:2;2193:6;2190:14;2187:34;;;2217:1;2214;2207:12;2187:34;2264:7;2257:4;2248:6;2244:2;2240:15;2236:26;2233:39;2230:59;;;2285:1;2282;2275:12;2230:59;1598:858;;2316:4;2308:13;;;;;-1:-1:-1;2340:6:54;;2393:3;2378:19;;2365:33;;-1:-1:-1;2445:3:54;2430:19;2417:33;;-1:-1:-1;1598:858:54;-1:-1:-1;;;1598:858:54:o","linkReferences":{}},"methodIdentifiers":{"deleteIdentities(uint256[8],bytes,uint256,uint256)":"ea10fbbe","insertRoot(uint256)":"c46d227a","latestRoot()":"d7b0fef1","registerIdentities(uint256[8],uint256,uint32,uint256[],uint256)":"2217b211"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initRoot\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"preRoot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum MockWorldIDIdentityManager.TreeChange\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postRoot\",\"type\":\"uint256\"}],\"name\":\"TreeChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"deletionProof\",\"type\":\"uint256[8]\"},{\"internalType\":\"bytes\",\"name\":\"packedDeletionIndices\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"preRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postRoot\",\"type\":\"uint256\"}],\"name\":\"deleteIdentities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postRoot\",\"type\":\"uint256\"}],\"name\":\"insertRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"insertionProof\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"preRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"identityCommitments\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"postRoot\",\"type\":\"uint256\"}],\"name\":\"registerIdentities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Worldcoin\",\"details\":\"deployed through make mock and make local-mock\",\"events\":{\"TreeChanged(uint256,uint8,uint256)\":{\"params\":{\"kind\":\"Either \\\"insertion\\\" or \\\"update\\\", the kind of alteration that was made to the        tree.\",\"postRoot\":\"The value of the tree's root after the update.\",\"preRoot\":\"The value of the tree's root before the update.\"}}},\"kind\":\"dev\",\"methods\":{\"deleteIdentities(uint256[8],bytes,uint256,uint256)\":{\"params\":{\"postRoot\":\"The root obtained after deleting all of `identityCommitments` into the tree        described by `preRoot`. Must be an element of the field `Kr`.\",\"preRoot\":\"The value for the root of the tree before the corresponding identity commitments have been deleted. Must be an element of the field `Kr`.\"}},\"registerIdentities(uint256[8],uint256,uint32,uint256[],uint256)\":{\"params\":{\"identityCommitments\":\"The identities that were inserted into the tree starting at        `startIndex` and `preRoot` to give `postRoot`. All of the commitments must be        elements of the field `Kr`.\",\"postRoot\":\"The root obtained after inserting all of `identityCommitments` into the tree        described by `preRoot`. Must be an element of the field `Kr`. (alread in reduced form)\",\"startIndex\":\"The position in the tree at which the insertions were made.\"}}},\"title\":\"WorldID Identity Manager Mock\",\"version\":1},\"userdoc\":{\"events\":{\"TreeChanged(uint256,uint8,uint256)\":{\"notice\":\"Emitted when the current root of the tree is updated.\"}},\"kind\":\"user\",\"methods\":{\"latestRoot()\":{\"notice\":\"returns the latest root\"}},\"notice\":\"Mock of the WorldID Identity Manager contract (world-id-contracts) to test functionality on a local chain\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/mock/MockWorldIDIdentityManager.sol\":\"MockWorldIDIdentityManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/\",\":@eth-optimism/contracts/=node_modules/@eth-optimism/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/test/=lib/prb-test/src/\",\":@rari-capital/solmate/=lib/solmate/\",\":@scroll-tech/contracts/=node_modules/@scroll-tech/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":fx-portal/contracts/=lib/contracts/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":prb-test/=lib/prb-test/src/\",\":solmate/=lib/solmate/\",\":src/=src/\"]},\"sources\":{\"src/interfaces/IWorldIDIdentityManager.sol\":{\"keccak256\":\"0xf088e152bce5d5dbf7ec47aeaf3e942bbea4f55a1f0b6422688dbe30f52ec6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e4a8e3951f0d3110b972a7ecc9374514e8ccb4d48affadbcac7c1ef1cee3d7dd\",\"dweb:/ipfs/QmYuWrenPXH92iRjkf9ERpcJuetEEqS3m9ykJW8Kaasyi1\"]},\"src/mock/MockWorldIDIdentityManager.sol\":{\"keccak256\":\"0x5767313a5ac89606fcd910697a16095d63b6a833574b8c7b21b165c28b86af30\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://23ffa78d255b4cc0587468831ccafc71e720652d005caa187b19eb93531cd820\",\"dweb:/ipfs/QmfST8MmzwQkTQUNr66yt87MpMuBX8RAU6RyVRjcMj7khr\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.16+commit.07a7930e"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"initRoot","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"preRoot","type":"uint256","indexed":true},{"internalType":"enum MockWorldIDIdentityManager.TreeChange","name":"kind","type":"uint8","indexed":true},{"internalType":"uint256","name":"postRoot","type":"uint256","indexed":true}],"type":"event","name":"TreeChanged","anonymous":false},{"inputs":[{"internalType":"uint256[8]","name":"deletionProof","type":"uint256[8]"},{"internalType":"bytes","name":"packedDeletionIndices","type":"bytes"},{"internalType":"uint256","name":"preRoot","type":"uint256"},{"internalType":"uint256","name":"postRoot","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"deleteIdentities"},{"inputs":[{"internalType":"uint256","name":"postRoot","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"insertRoot"},{"inputs":[],"stateMutability":"view","type":"function","name":"latestRoot","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256[8]","name":"insertionProof","type":"uint256[8]"},{"internalType":"uint256","name":"preRoot","type":"uint256"},{"internalType":"uint32","name":"startIndex","type":"uint32"},{"internalType":"uint256[]","name":"identityCommitments","type":"uint256[]"},{"internalType":"uint256","name":"postRoot","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"registerIdentities"}],"devdoc":{"kind":"dev","methods":{"deleteIdentities(uint256[8],bytes,uint256,uint256)":{"params":{"postRoot":"The root obtained after deleting all of `identityCommitments` into the tree        described by `preRoot`. Must be an element of the field `Kr`.","preRoot":"The value for the root of the tree before the corresponding identity commitments have been deleted. Must be an element of the field `Kr`."}},"registerIdentities(uint256[8],uint256,uint32,uint256[],uint256)":{"params":{"identityCommitments":"The identities that were inserted into the tree starting at        `startIndex` and `preRoot` to give `postRoot`. All of the commitments must be        elements of the field `Kr`.","postRoot":"The root obtained after inserting all of `identityCommitments` into the tree        described by `preRoot`. Must be an element of the field `Kr`. (alread in reduced form)","startIndex":"The position in the tree at which the insertions were made."}}},"version":1},"userdoc":{"kind":"user","methods":{"latestRoot()":{"notice":"returns the latest root"}},"version":1}},"settings":{"remappings":["@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/","@eth-optimism/contracts/=node_modules/@eth-optimism/contracts/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@prb/test/=lib/prb-test/src/","@rari-capital/solmate/=lib/solmate/","@scroll-tech/contracts/=node_modules/@scroll-tech/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","fx-portal/contracts/=lib/contracts/contracts/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/","prb-test/=lib/prb-test/src/","solmate/=lib/solmate/","src/=src/"],"optimizer":{"enabled":true,"runs":10000},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/mock/MockWorldIDIdentityManager.sol":"MockWorldIDIdentityManager"},"evmVersion":"london","libraries":{}},"sources":{"src/interfaces/IWorldIDIdentityManager.sol":{"keccak256":"0xf088e152bce5d5dbf7ec47aeaf3e942bbea4f55a1f0b6422688dbe30f52ec6cf","urls":["bzz-raw://e4a8e3951f0d3110b972a7ecc9374514e8ccb4d48affadbcac7c1ef1cee3d7dd","dweb:/ipfs/QmYuWrenPXH92iRjkf9ERpcJuetEEqS3m9ykJW8Kaasyi1"],"license":"MIT"},"src/mock/MockWorldIDIdentityManager.sol":{"keccak256":"0x5767313a5ac89606fcd910697a16095d63b6a833574b8c7b21b165c28b86af30","urls":["bzz-raw://23ffa78d255b4cc0587468831ccafc71e720652d005caa187b19eb93531cd820","dweb:/ipfs/QmfST8MmzwQkTQUNr66yt87MpMuBX8RAU6RyVRjcMj7khr"],"license":"MIT"}},"version":1},"id":36}